# .github/workflows/auto-post-note.yml
name: 🚀 Note.com自動投稿システム

on:
  schedule:
    # 月曜・木曜の朝8時JST = 日曜・水曜の23時UTC
    - cron: "0 23 * * 0,3"
  workflow_dispatch: # 手動実行も可能

# 同時実行防止
concurrency:
  group: note-auto-post
  cancel-in-progress: false

jobs:
  auto-post-note:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 チェックアウト
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: 🐍 Python環境セットアップ
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: 📦 依存関係インストール
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          playwright install chromium

      - name: 📝 記事生成（Peaky Media RSS）
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          TZ: Asia/Tokyo # 👈 JST時間を強制設定（日付不整合対策）
        run: |
          echo "🕐 $(TZ='Asia/Tokyo' date +'%Y-%m-%d %H:%M:%S JST') - 記事生成開始"
          python create.py
          echo "✅ 記事生成完了"

      - name: 🚀 Note.com自動投稿
        env:
          NOTE_EMAIL: ${{ secrets.NOTE_EMAIL }}
          NOTE_PASSWORD: ${{ secrets.NOTE_PASSWORD }}
          HEADLESS: "true"
        run: |
          echo "🕐 $(TZ='Asia/Tokyo' date +'%Y-%m-%d %H:%M:%S JST') - 投稿開始"
          python main.py
          echo "✅ 投稿完了"

      - name: 📄 記事をリポジトリに保存（エラー耐性版）
        run: |
          # Git設定
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"

          echo "📁 記事ファイル確認中..."

          # 実際に生成された記事ファイルを探す（日付不整合対応）
          ARTICLE_FILE=$(find articles/ -name "*.md" -type f | sort | tail -1)

          if [ -n "$ARTICLE_FILE" ] && [ -f "$ARTICLE_FILE" ]; then
            echo "📄 記事ファイル発見: $ARTICLE_FILE"
            echo "📊 記事サイズ: $(wc -c < "$ARTICLE_FILE") bytes"
            
            # 記事タイトル抽出
            TITLE=$(grep '^# ' "$ARTICLE_FILE" | head -1 | sed 's/^# //' | cut -c1-50 || echo "記事タイトル")
            
            # Git処理（シンプル版）
            git add "$ARTICLE_FILE" || echo "⚠️ Git add失敗（続行）"
            
            # 変更があるかチェック
            if ! git diff --staged --quiet 2>/dev/null; then
              echo "📝 新しい記事をコミット中..."
              
              # コミット実行
              COMMIT_DATE=$(TZ='Asia/Tokyo' date +'%Y%m%d')
              git commit -m "Auto-generated article: ${COMMIT_DATE}" \
                         -m "Title: ${TITLE}..." \
                         -m "Generated: $(TZ='Asia/Tokyo' date +'%Y-%m-%d %H:%M:%S JST')" || echo "⚠️ コミット失敗（続行）"
              
              # プッシュ（シンプル版）
              echo "📤 記事をプッシュ中..."
              if git push origin main 2>/dev/null; then
                echo "✅ 記事保存完了"
              else
                echo "⚠️ プッシュ失敗（記事投稿は成功済み）"
                # リモートの変更を取得してリトライ
                git fetch origin main 2>/dev/null || true
                if git rebase origin/main 2>/dev/null; then
                  git push origin main 2>/dev/null && echo "✅ リトライ成功" || echo "⚠️ 最終プッシュ失敗"
                else
                  echo "⚠️ リベース失敗（記事投稿は成功済み）"
                  git rebase --abort 2>/dev/null || true
                fi
              fi
            else
              echo "📝 新しい変更はありません"
            fi
          else
            echo "⚠️ 記事ファイルが見つかりませんが、投稿は完了済み"
            ls -la articles/ || echo "📁 articlesディレクトリが存在しません"
          fi

          echo "🎉 全処理完了！"

      - name: 📸 エラー時のスクリーンショット保存
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-screenshots-${{ github.run_number }}
          path: "*.png"
          retention-days: 3

      - name: 📊 実行サマリー
        if: always()
        run: |
          echo "🕐 完了時刻: $(TZ='Asia/Tokyo' date +'%Y-%m-%d %H:%M:%S JST')"
          echo "📁 生成ファイル確認:"
          ls -la articles/ 2>/dev/null || echo "📂 articlesディレクトリなし"
          echo "🎯 Note.com投稿: 完了"
          echo "📄 記事保存: $([ -n "$(find articles/ -name "*.md" -type f 2>/dev/null)" ] && echo "完了" || echo "スキップ")"
